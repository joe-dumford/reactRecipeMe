{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","title","src","image_url","alt","length","substring","publisher","to","pathname","recipe_id","state","API_KEY","App","e","a","recipeName","target","elements","value","preventDefault","fetch","api_call","json","data","setState","console","log","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","this","Component","Recipe","activeRecipe","location","req","res","href","publisher_url","React","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbe0039b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.getRecipe} style={{ marginBottom:\"2rem\" }}>\n        <input className=\"form__input\" type=\"text\" name=\"recipeName\" />\n        <button className=\"form__button\">Search</button>\n    </form>\n);\n\nexport default Form;","import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\n\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n    { props.recipes.map((recipe) => {\n      return (\n        <div key={recipe.title} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}>\n          <div className=\"recipes__box\">\n            <img \n              className=\"recipe__box-img\" \n              src={recipe.image_url} \n              alt={recipe.title}/>\n              <div className=\"recipe__text\">\n                <h5 className=\"recipes__title\">\n                {/* Using substring below to level our long titled recipes to the same size as short*/}\n                  { recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0, 25)}...` }\n                </h5>\n                <p className=\"recipes__subtitle\">Publisher: <span>\n                  { recipe.publisher }\n                </span></p>\n              </div>\n              <button className=\"recipe_buttons\">\n                <Link to={{ \n                  pathname: `/recipe/${recipe.recipe_id}`,\n                  state: { recipe: recipe.title }\n                }}>View Recipe</Link>\n              </button>\n          </div>\n        </div>\n      );\n    })}\n    </div>\n  </div>\n);\n\nexport default Recipes;","import React, { Component } from 'react';\nimport './styles/App.css';\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\"; \n\nconst API_KEY = \"ef644aaea16bd25a365ebbd195cd583e\";\n\nclass App extends Component {\n  state = {\n      recipes: []\n  }\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://cors-anywhere.herokuapp.com/www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=10`);\n\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({ recipes });\n  }\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Me!</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst API_KEY = \"ef644aaea16bd25a365ebbd195cd583e\";\n\nclass Recipe extends React.Component {\n    state = {\n      activeRecipe: []\n    }\n    componentDidMount = async () => {\n      const title = this.props.location.state.recipe;\n      const req = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${title}`);\n      \n      const res = await req.json();\n      this.setState({ activeRecipe: res.recipes[0] });\n      console.log(this.state.activeRecipe);\n    }\n    render() {\n      const recipe = this.state.activeRecipe;\n      return (\n        <div className=\"container\">\n          { this.state.activeRecipe.length !== 0 &&\n            <div className=\"active-recipe\">\n              <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title}/>\n              <h3 className=\"active-recipe__title\">{ recipe.title }</h3>\n              <h4 className=\"active-recipe__publisher\">\n                Publisher: <span>{ recipe.publisher }</span>\n              </h4>\n              <p className=\"active-recipe__website\">Website: \n                <span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span>\n              </p>\n              <button className=\"active-recipe__button\">\n                <Link to=\"/\">Home</Link>\n              </button>\n            </div>\n          }\n        </div>\n      );\n    }\n  };\n  \n  export default Recipe;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport App from \"../App\";\nimport Recipe from \"./Recipe\";\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/\" component={App} exact />\n            <Route path=\"/recipe/:id\" component={Recipe} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}